
/**
char* encode(char*buf, unsigned int mask, int operation, int character);
 
pierwszy to tablica znaków, drugi to maska gdzie interesuje nas 10 najmlodszych bitow
(tam gdzie 1 to na tej cyfrze ma zostac wykonana operacja np znak 8 i osmy bit 1 wiec wykonujemy na 8 operacje) ,
 3 to jaka operacja miala byc wykonana (0 nie rob nic , 1 usun znaki wedlug maski,
 3 zamien na znak podany jako 4 argument i 4 zamien na przeciwna i wsyztsko wedlug maski( np 8 jezeli ma 8bit 1 to zamieniamy na 2)
                        ___________________________________________________________________
 
była funkcja w c z 4 parametrami: string, maska(int), operacja(int), znak(int)
 
chodziło o to żeby przetworzyć stringa w zależności od operacji i maski.
w stringu wszystko poza cyframi zawsze pozostawało bez zmian.
w masce zawsze bierzemy 10 najmłodszych bitów i w zależności od tego czy dany bit jest 1, to na danej cyfrze wykonujemy operacje
np. 0000000001 - jeśli w stringu pojawi się cyfra 0 to trzeba wykonać odpowiednią operację
0000000101 - operacje na zerach i dwójkach
 
rodzaje operacji:
1-nic (zwraca wyjściowy string)
2-usunięcie (usuwa daną cyfrę ale nie wystarczy wstawić spacje, wtedy trzeba skrócić stringa)
3-"transpose" - zamienić x na 9-x np. 1 na 8, 0 na 9 itd.
4- zamienienie cyfry na znak podany w parametrze funkcji
 
wersja na 3 to były operacje 1 i 2, a usunięcie się najtrudniejsze wydaje przez to że trzeba stringa przesuwać

    Contact GitHub API Training Shop Blog About 
*/

#include <stdio.h>
#include <string.h>
#include <iostream>
using namespace std;

char* toBin(int number){
	string result = "";
	while (number > 0){
		if (number%2 == 0)
			result += '0';
		else result += '1';

		number = number / 2;
	}

char *cstr = new char[result.length() + 1];
strcpy(cstr, result.c_str());

	return cstr;
}


char* encode(char*buf, unsigned int mask, int operation, int character){
	if (operation == 1){
		return buf;
	}
	cout << "something"<<endl;
	char* maskB = toBin(mask);
	cout << maskB << endl;
	int tmp = 0;
	string tmpS = "";
	bool add = true;
	if (operation == 2){
		for (int i = 0; i < strlen(buf); i++){
			if (buf[i] > 47 && buf[i] < 58){
				tmp = buf[i] - 48;
				for (int j = 0; j < strlen(maskB); j++){
					if (j == tmp && maskB[j] != '0'){
						tmpS += "";
						add = false;
						break;
					}
				}	
			}
			if (add == true)
				tmpS += buf[i];
			else add = true;
		}
	}
	if (operation == 3){
		for (int i = 0; i < strlen(buf); i++){
			if (buf[i] > 47 && buf[i] < 58){
				tmp = buf[i] - 48;
				for (int j = 0; j < strlen(maskB); j++){
					if (j == tmp && maskB[j] != '0'){
						cout << tmp << endl;
						tmpS += ('9' - buf[i]) + "";
						cout << tmpS << endl;
						add = false;
						break;
					}
				}	
			}
			if (add == true)
				tmpS += buf[i];
			else add = true;
		}
	}
	if (operation == 4){
		for (int i = 0; i < strlen(buf); i++){
			if (buf[i] > 47 && buf[i] < 58){
				tmp = buf[i] - 48;
				for (int j = 0; j < strlen(maskB); j++){
					if (j == tmp && maskB[j] != '0'){
						tmpS += character;
						add = false;
						break;
					}
				}	
			}
			if (add == true)
				tmpS += buf[i];
			else add = true;
		}
	}

	char *cstr = new char[tmpS.length() + 1];
	strcpy(cstr, tmpS.c_str());

	return cstr;
}


int main(){
	char* buf = "0123456789";
	char* buf2 = "a232e5656";
	
	printf("Test 1: % s \n", encode(buf, 7, 1, 'a'));
	printf("Test 2: % s \n", encode(buf, 7, 2, 'a'));
	printf("Test 3: % s \n", encode(buf, 7, 3, 'a'));
	printf("Test 4: % s \n", encode(buf, 7, 4, 'a'));
	printf("Test 5: %s \n", encode(buf,4,2,'a'));
	printf("Test 6: %s \n", encode(buf2,11,2,'a'));
	return 0;
}
